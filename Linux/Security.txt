                ---------------------------------------------------------------

                ******  ******  ******  **  **  ******  ******  ******  **   **
                **      **      ******  **  **  **  **  ******  ******   ** **
                ****    ******  **      **  **  **  **    **      **      ***
                 ****   ******  **      **  **  *****     **      **      ***
                    **  **      ******  ******  ** **   ******    **      ***
                ******  ******  ******  ******  **  **  ******    **      ***
                ---------------------------------------------------------------

===========================================================================================================================================

1- Administrative account

  There are many different ways to execute a command that requires administrative or root privileges. Logging in to the system as the root user allows you to execute commands as the administrator. This access is potentially dangerous because you may forget that you are logged in as root and might run a command that could cause problems on the system. As a result, it is not recommended to log in as the root user directly.

  Because using the root account is potentially dangerous, you should only execute commands as root if administrative privileges are needed. If the root account is disabled, as it is on the Ubuntu distribution, then administrative commands can be executed using the sudo command. If the root account is enabled, then a regular user can execute the su command to switch accounts to the root account.

===========================================================================================================================================

2- Switching Users

  The su command allows you to run a shell as a different user. While switching to the root user is what the su command is used for most frequently, it can also switch to other users as well.

    su [options] [username]
  
  When switching users utilizing the login shell option is recommended, as the login shell fully configures the new shell with the settings of the new user, ensuring any commands executed run correctly. If this option is omitted, the new shell changes the UID but doesn't fully log in the user. The login shell option can be specified one of three ways:

    su -
    su -l
    su --login

  By default, if a username is not specified, the su command opens a new shell as the root user. The following two commands are equivalent ways to start a shell as the root user:

    su - root
    su -
  
  After pressing Enter to execute either one of these commands, the user must provide the password of the root user to start the new shell. If you don't know the password of the account that you are shifting to, then the su command will fail.

===========================================================================================================================================

3- Executing Privileged Commands 
  
  The sudo command allows users to execute commands as another user. Similar to the su command, the root user is assumed by default.

    sudo [options] command

  In distributions that do not allow the root user to login directly or via the su command, the installation process automatically configures one user account to be able to use the sudo command to execute commands as if the root user executed them. For example, administrative privileges are necessary to view the /etc/shadow file:

    KEGAVICIO@localhost:~$ head /etc/shadow
    head: cannot open '/etc/shadow' for reading: Permission denied

  When using the sudo command to execute a command as the root user, the command prompts for the user's own password, not that of the root user. This security feature could prevent unauthorized administrative access if the user were to leave their computer unattended. The prompt for the password will not appear again as long as the user continues to execute sudo commands less than five minutes apart.

  The following sudo command would run the head command from the previous example as the root user. It prompts for the password of the sysadmin user:

    KEGAVICIO@localhost:~$ sudo head /etc/shadow
    [sudo] password for sysadmin: netlab123
    root:$6$4Yga95H9$8HbxqsMEIBTZ0YomlMffYCV9VE1SQ4T2H3SHXw41M02SQtfAdDVE9mqGp2hr20q.ZuncJpLyWkYwQdKlSJyS8.:16464:0:99999:7:::
    daemon:*:16463:0:99999:7:::
    bin:*:16463:0:99999:7:::
    sys:*:16463:0:99999:7:::
    sync:*:16463:0:99999:7:::
    games:*:16463:0:99999:7:::
    man:*:16463:0:99999:7:::
    lp:*:16463:0:99999:7:::
    mail:*:16463:0:99999:7:::
    news:*:16463:0:99999:7:::

  Using the sudo command to execute an administrative command results in an entry placed in a log file. Each entry includes the name of the user who executed the command, the command that was executed and the date and time of execution. This allows for increased accountability, compared to a system where many users might know the root password and can either log in directly as root or use the su command to execute commands as the root user.

===========================================================================================================================================

4- User Accounts 

  There are several text files in the /etc directory that contain the account data of the users and groups defined on the system. For example, to see if a specific user account has been defined on the system, then the place to check is the /etc/passwd file.

  The /etc/passwd file defines some of the account information for user accounts. The following example shows the last five lines of a typical /etc/passwd file:

  sysadmin@localhost:~$ tail -5 /etc/passwd
  syslog:x:101:103::/home/syslog:/bin/false
  bind:x:102:105::/var/cache/bind:/bin/false
  sshd:x:103:65534::/var/run/sshd:/usr/sbin/nologin
  operator:x:1000:37::/root:/bin/sh
  sysadmin:x:1001:1001:System Administrator,,,,:/home/sysadmin:/bin/bash  

  Name

    sysadmin:x:1001:1001:System Administrator,,,,:/home/sysadmin:/bin/bash
  The first field contains the name of the user or the username. This name is used when logging in to the system and when file ownership is viewed with the ls -l command.

  Password Placeholder

    sysadmin:x:1001:1001:System Administrator,,,,:/home/sysadmin:/bin/bash
  At one time, the password for the user was stored in this location, however, now the x in this field indicates to the system that the password is in the /etc/shadow file.

  User ID

    sysadmin:x:1001:1001:System Administrator,,,,:/home/sysadmin:/bin/bash
  Each account is assigned a user ID (UID).

  Primary Group ID

    sysadmin:x:1001:1001:System Administrator,,,,:/home/sysadmin:/bin/bash
  This field indicates that the user is a member of that group, which means the user has special permissions on any file that is owned by this group.

  Comment

    sysadmin:x:1001:1001:System Administrator,,,,:/home/sysadmin:/bin/bash
  This field can contain any information about the user, including their real name or other useful information.

  Home Directory

    sysadmin:x:1001:1001:System Administrator,,,,:/home/sysadmin:/bin/bash
  This field defines the location of the user's home directory. 

  Shell

    sysadmin:x:1001:1001:System Administrator,,,,:/home/sysadmin:/bin/bash
  This field indicates the location of the user's login shell. By default, the user is placed in this shell whenever they log into a command line environment or open a terminal window. 

==========================================================================================================================================

5- Passwords

  As previously mentioned, the /etc/shadow file contains account information related to the user's password. However, regular users can't view the contents of the /etc/shadow file for security reasons. To view the contents of this file, log in as the administrator (the root account):

    KEGAVICIO@localhost:~$ su -
    Password: netlab123

  A typical /etc/shadow file would look similar to the following:
    root@localhost:~# tail -5 /etc/shadow
    syslog:*:16874:0:99999:7:::
    bind:*:16874:0:99999:7:::
    sshd:*:16874:0:99999:7:::
    operator:!:16874:0:99999:7:::
    sysadmin:$6$c75ekQWF$.GpiZpFnIXLzkALjDpZXmjxZcIll14OvL2mFSIfnc1aU2cQ/221QL5AX5RjKXpXPJRQ0uVN35TY3/..c7v0.n0:16874:5:30:7:60:15050:

  Username

    sysadmin:$6$c75ekQWF$.GpiZpFnIXLzkALjDpZXmjxZcIll14OvL2mFSIfnc1aU2cQ/221QL5AX5RjKXpXPJRQ0uVN35TY3/..c7v0.n0:16874:5:30:7:60:15050::
  This field contains the username of the account, which matches the account name in the /etc/passwd file.

  Password

    sysadmin:$6$c75ekQWF$.GpiZpFnIXLzkALjDpZXmjxZcIll14OvL2mFSIfnc1aU2cQ/221QL5AX5RjKXpXPJRQ0uVN35TY3/..c7v0.n0:16874:5:30:7:60:15050::
  The password field contains the encrypted password for the account. This very long string is a one-way encryption, meaning that it can't be "reversed" to determine the original password.

  Last Change

    sysadmin:$6$c75ekQWF$.GpiZpFnIXLzkALjDpZXmjxZcIll14OvL2mFSIfnc1aU2cQ/221QL5AX5RjKXpXPJRQ0uVN35TY3/..c7v0.n0:16874:5:30:7:60:15050::
  This field contains a number that represents the last time the password was changed. The number 16874 is the number of days since January 1, 1970 (called the Epoch).

  Minimum

    sysadmin:$6$c75ekQWF$.GpiZpFnIXLzkALjDpZXmjxZcIll14OvL2mFSIfnc1aU2cQ/221QL5AX5RjKXpXPJRQ0uVN35TY3/..c7v0.n0:16874:5:30:7:60:15050::
  This field indicates the minimum number of days between password changes. 

  Maximum

    sysadmin:$6$c75ekQWF$.GpiZpFnIXLzkALjDpZXmjxZcIll14OvL2mFSIfnc1aU2cQ/221QL5AX5RjKXpXPJRQ0uVN35TY3/..c7v0.n0:16874:5:30:7:60:15050:
  This field indicates the maximum number of days the password is valid.

  Warn

    sysadmin:$6$c75ekQWF$.GpiZpFnIXLzkALjDpZXmjxZcIll14OvL2mFSIfnc1aU2cQ/221QL5AX5RjKXpXPJRQ0uVN35TY3/..c7v0.n0:16874:5:30:7:60:15050::
  If the maximum field is set, the warn field indicates the number of days before password expiry that the system warns the user. 

  Inactive

    sysadmin:$6$c75ekQWF$.GpiZpFnIXLzkALjDpZXmjxZcIll14OvL2mFSIfnc1aU2cQ/221QL5AX5RjKXpXPJRQ0uVN35TY3/..c7v0.n0:16874:5:30:7:60:15050::
  If the user ignores the warnings and exceeds the password timeframe, their account will be locked out. In that case, the inactive field provides the user with a "grace" period in which their password can be changed, but only during the login process.

  Expire

    sysadmin:$6$c75ekQWF$.GpiZpFnIXLzkALjDpZXmjxZcIll14OvL2mFSIfnc1aU2cQ/221QL5AX5RjKXpXPJRQ0uVN35TY3/..c7v0.n0:16874:5:30:7:60:15050::
  This field indicates the day the account will expire, represented by the number of days from January 1, 1970. 

  Reserved

    sysadmin:$6$c75ekQWF$.GpiZpFnIXLzkALjDpZXmjxZcIll14OvL2mFSIfnc1aU2cQ/221QL5AX5RjKXpXPJRQ0uVN35TY3/..c7v0.n0:16874:5:30:7:60:15050::
  Currently not used, this field is reserved for future use.

==========================================================================================================================================

6- System Accounts 
  
  Users log into the system using regular user accounts. Typically, these accounts have UID values of greater than 500 (on some systems 1,000). The root user has special access to the system. This access is provided to the account with a UID of 0.

  In the /etc/passwd file, system accounts have a non-login program in the shell field:

    sshd:x:103:65534::/var/run/sshd:/usr/sbin/nologin
  In the /etc/shadow file, system accounts typically have an asterisk * character in place of the password field:

    sshd:*:16874:0:99999:7:::
  Most system accounts are necessary for the system to function correctly. You should not delete a system account unless you are certain that removing the account won't cause problems. Take time to learn what each system account does; system administrators are tasked with ensuring the security of the system, and that includes properly securing the system accounts.

==========================================================================================================================================

7- Group Accounts 

  Your level of access to a system is not determined solely by your user account. Each user can be a member of one or more groups, which can also affect the level of access to the system.

  Traditionally, UNIX systems limited users to belonging to no more than a total of sixteen groups, but the recent Linux kernels support users with over sixty-five thousand group memberships.

  The /etc/passwd file defines the primary group membership for a user. Supplemental group membership (or secondary group membership) and the groups themselves are defined in the /etc/group file.

  The /etc/group file is another colon-delimited file. The following describes the fields in more detail, using a line that describes a typical group account.

  Group Name

    mail:x:12:mail,postfix
  This field contains the group name. As with usernames, names are more natural for people to remember than numbers. The system typically uses group IDs rather than group names.

  Password Placeholder

    mail:x:12:mail,postfix
  While there are passwords for groups, they are rarely used in Linux. If the administrator makes a group password, it would be stored in the /etc/gshadow file. The x in this field is used to indicate that the password is not stored in this file.

  GID

    mail:x:12:mail,postfix
  Each group is associated with a unique group ID (GID) which is placed in this field.

  User List

    mail:x:12:mail,postfix
  This last field is used to indicate who is a member of the group.

==========================================================================================================================================

8- Viewing User Information 

  The id command is used to print user and group information for a specified user.

    id [options] username

  When executed without an argument, the id command outputs information about the current user, allowing you to confirm your identity on the system.
    KEGAVICIO@localhost:~$ id
    uid=1001(sysadmin) gid=1001(sysadmin) groups=1001(sysadmin),4(adm),27(sudo)

  The output of the id command always lists the user account information first, using the user ID and username first:
    uid=1001(sysadmin) gid=1001(sysadmin) groups=1001(sysadmin),4(adm),27(sudo)

  After the username the primary group is listed, denoted by both the group ID and group name:
    uid=1001(sysadmin) gid=1001(sysadmin) groups=1001(sysadmin),4(adm),27(sudo)

  The user shown belongs to three groups:
    uid=1001(sysadmin) gid=1001(sysadmin) groups=1001(sysadmin),4(adm),27(sudo)

  If the command is given a username as an argument, such as root, it displays information about the specified account:
    KEGAVICIO@localhost:~$ id root
    uid=0(root) gid=0(root) groups=0(root)

  To print only the user's primary group, use the -g option: ⁠⁠ 
    KEGAVICIO@localhost:~$ id -g
    1001

  The id command can also be used to verify the user's secondary group memberships using the -G option. This will print all the groups that a user belongs to, both primary and secondary.
    KEGAVICIO@localhost:~$ id -G
    1001 4 27

  The output of the previous example aligns with the contents of the /etc/group file, as a search for sysadmin reveals:
    KEGAVICIO@localhost:~$ cat /etc/group | grep sysadmin
    adm:x:4:syslog,sysadmin
    sudo:x:27:sysadmin
    sysadmin:x:1001:

==========================================================================================================================================

9- Viewing Current Users 
  
  The who command displays a list of users who are currently logged into the system, where they are logged in from, and when they logged in.
    KEGAVICIO@localhost:~$ who
    root     	tty2        2013-10-11 10:00
    sysadmin	tty1        2013-10-11 09:58 (:0)
    sysadmin 	pts/0       2013-10-11 09:59 (:0.0)
    sysadmin 	pts/1       2013-10-11 10:00 (example.com)
  
  The following describes the output of the who command:

  Username
    root     	   tty2        2013-10-11 10:00
  This column indicates the name of the user who is logged in. Note that by "logged in" we mean "any login process and open terminal window".

  Terminal

    root     	   tty2        2013-10-11 10:00
    sysadmin	   pts/0	2013-10-11 09:59 (:0.0)
  This column indicates which terminal window the user is working in.
  If the terminal name starts with tty, then this is an indication of a local login, as this is a regular command line terminal. 

  Date

    root     	   tty2        2013-10-11 10:00
  This column indicates when the user logged in.

  Host

  After the date and time, some location information may appear. If the location information contains a hostname, domain name or IP address, then the user has logged in remotely:
    sysadmin 	pts/1       2013-10-11 10:00 (example.com)
  
  If there is a colon and a number, then this indicates that they have performed a local graphical login:
    sysadmin     tty1        2013-10-11 09:59 (:0)
  
  If no location information is shown in the last column, then this means the user logged in via a local command line process:
    root     	   tty2        2013-10-11 10:00

  There may be instances where more information about users, and what they are doing on the system, is needed. The w command provides a more detailed list about the users currently on the system than the who command. It also provides a summary of the system status. For example:

    KEGAVICIO@localhost:~$ w
     10:44:03 up 50 min,  4 users,  load average: 0.78, 0.44, 0.19
    USER     	TTY     FROM	    LOGIN@   IDLE  	JCPU   	PCPU    WHAT
    root     	tty2    -           10:00    43:44 	0.01s  	0.01s   -bash
    sysadmin 	tty1    :0          09:58    50:02	5.68s 	0.16s   pam: gdm-password
    sysadmin	pts/0   :0.0        09:59    0.00s      0.14s  	0.13s   ssh 192.168.1.2
    sysadmin 	pts/1   example.com 10:00    0.00s  	0.03s  	0.01s   w


  The first line of output from the w command is identical to that of the uptime command. It shows the current time, how long the system has been running, the total number of users currently logged on and the load on the system averaged over the last 1, 5 and 15 minute time periods. Load average is CPU utilization where, for a single-core system, a value of 1 would mean 100% CPU usage during that period of time. For a dual-core system, it would mean 50% CPU usage, and for a quad-core system, it would mean 25% CPU usage.

  The following describes the rest of the output of the w command:

  ==============================================================================================
  | Column | Example	   | Description                                                         |
  ==============================================================================================
  | USER	 | root	       | The name of the user who is logged in.                              |
  | TTY	   | tty2	       | Which terminal window the user is working in.                       |
  | FROM	 | example.com | Where the user logged in from.                                      |
  | LOGIN@ |	10:00	     | When the user logged in.                                            |
  | IDLE	 | 43:44	     | How long the user has been idle since the last command was executed.|
  | JCPU	 | 0.01s	     | The total cpu time used by all processes run since login.           |
  | PCPU	 | 0.01s	     | The total cpu time for the current process.                         |
  | WHAT	 | -bash	     | The current process that the user is running.                       |
  ==============================================================================================

==========================================================================================================================================

10- Viewing Login History
  
  The last command reads the entire login history from the /var/log/wtmp file and displays all logins and reboot records by default.

  The /var/log/wtmp file keeps a log of all users who have logged in and out the system.

    KEGAVICIO@localhost:~$ last
    sysadmin console Tue Sep 18 02:31   still logged in
    sysadmin console                    Tue Sep 18 02:31 - 02:31  (00:00)
    wtmp begins Tue Sep 18 02:31:57 2018

  The last command is slightly different from the who and w commands. By default, it also shows the username, terminal, and login location, not just of the current login sessions, but previous sessions as well. Unlike the who and w commands, it displays the date and time the user logged into the system. If the user has logged off the system, then it will display the total time the user spent logged in, otherwise it will display still logged in.


