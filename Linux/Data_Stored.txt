                    --------------------------------
                                                
                    ******   ******  *******  ******
                    **  ***  **  **  *******  **  **
                    **   **  **  **    ***    **  **
                    **   **  ******    ***    ******
                    **  ***  **  **    ***    **  **
                    ******   **  **    ***    **  **

                    --------------------------------

===========================================================================================================================================

1- Processes

  The kernel provides access to information about active processes through a pseudo filesystem that is visible under the /proc directory.
  The /proc directory not only contains information about running processes, as its name would suggest, but it also contains information about the system hardware and the current kernel configuration.

  The /proc directory is read, and its information utilized by many different commands on the system, including but not limited to top, free, mount, umount and many many others. It is rarely necessary for a user to mine the /proc directory directly—it’s easier to use the commands that utilize its information.

  KEGAVICIO@localhost:~$ ls /proc
  1          cpuinfo      irq          modules       sys
  128        crypto       kallsyms     mounts        sysrq-trigger
  17         devices      kcore        mtrr          sysvipc
  21         diskstats    key-users    net           thread-self 
  23         dma          keys         pagetypeinfo  timer_list
  39         driver       kmsg         partitions    timer_stats
  60         execdomains  kpagecgroup  sched_debug   tty
  72         fb           kpagecount   schedstat     uptime
  acpi       filesystems  kpageflags   scsi          version
  buddyinfo  fs           loadavg      self          version_signature
  bus        interrupts   locks        slabinfo      vmallocinfo
  cgroups    iomem        mdstat       softirqs      vmstat
  cmdline    ioports      meminfo      stat          zoneinfo
  consoles   ipmi         misc         swaps

  The output shows a variety of named and numbered directories. There is a numbered directory for each running process on the system, where the name of the directory matches the process ID (PID) for the running process.

  There are also a number of regular files in the /proc directory that provide information about the running kernel:

  File	        Contents
  /proc/cmdline	Information that was passed to the kernel when it was first started, such as command line parameters and special instructions
  /proc/meminfo	Information about the use of memory by the kernel
  /proc/modules	A list of modules currently loaded into the kernel to add extra functionality

===========================================================================================================================================

2- Process Hierarchy

  When the kernel finishes loading during the boot procedure, it starts the init process and assigns it a PID of 1. This process then starts other system processes, and each process is assigned a PID in sequential order.

  When the system has been running for a long time, it may eventually reach the maximum PID value, which can be viewed and configured through the /proc/sys/kernel/pid_max file. Once the largest PID has been used, the system "rolls over" and continues seamlessly by assigning PID values that are available at the bottom of the range.

  Processes can be “mapped” into a family tree of parent and child couplings. If you want to view this tree, the command pstree displays it:

  KEGAVICIO@localhost:~$ pstree
  init-+-cron

       |-login---bash---pstree
       |-named---18*[{named}]
       |-rsyslogd---2*[{rsyslogd}]
       `-sshd

  If you were to examine the parent and child processes relationship using the output of the previous command, it could be described as the following:

  init is the parent of login
  login is the child of init
  login is the parent of bash
  bash is the child of login
  bash is the parent of pstree
  pstree is the child of bash

===========================================================================================================================================

3- Viewing Process Snapshot

  Another way of viewing processes is with the ps command. By default, the ps command only shows the current processes running in the current shell. Ironically, even though you are trying to obtain information about processes, the ps command includes itself in the output:

  KEGAVICIO@localhost:~$ ps 
  PID  TTY          TIME CMD
  6054 ?        00:00:00 bash
  6070 ?        00:00:01 xeyes
  6090 ?        00:00:01 firefox
  6146 ?        00:00:00 ps
  
  If you run ps with the option --forest, then, similar to the pstree command, it shows lines indicating the parent and child relationship:

  KEGAVICIO@localhost:~$ ps --forest
   PID TTY          TIME CMD
  6054 ?        00:00:00 bash
  6090 ?        00:00:02   \_ firefox
  6180 ?        00:00:00   \_ dash
  6181 ?        00:00:00        \_ xeyes
  6188 ?        00:00:00        \_ ps

  To be able to view all processes on the system execute either the ps aux command or the ps -ef command:
  KEGAVICIO@localhost:~$ ps aux | head
  USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
  root         1  0.0  0.0  17872  2892 ?        Ss   08:06   0:00 /sbin?? /init
  syslog      17  0.0  0.0 175744  2768 ?        Sl   08:06   0:00 /usr/sbin/rsyslogd -c5
  root        21  0.0  0.0  19124  2092 ?        Ss   08:06   0:00 /usr/sbin/cron
  root        23  0.0  0.0  50048  3460 ?        Ss   08:06   0:00 /usr/sbin/sshd
  bind        39  0.0  0.0 385988 19888 ?        Ssl  08:06   0:00 /usr/sbin/named -u bind
  root        48  0.0  0.0  54464  2680 ?        S    08:06   0:00 /bin/login -f
  sysadmin    60  0.0  0.0  18088  3260 ?        S    08:06   0:00 -bash
  sysadmin   122  0.0  0.0  15288  2164 ?        R+   16:26   0:00 ps aux
  sysadmin   123  0.0  0.0  18088   496 ?        D+   16:26   0:00 -bash

  KEGAVICIO@localhost:~$ ps -ef | head
  UID        PID  PPID  C STIME TTY          TIME CMD
  root         1     0  0 08:06 ?        00:00:00 /sbin?? /init
  syslog      17     1  0 08:06 ?        00:00:00 /usr/sbin/rsyslogd -c5
  root        21     1  0 08:06 ?        00:00:00 /usr/sbin/cron
  root        23     1  0 08:06 ?        00:00:00 /usr/sbin/sshd
  bind        39     1  0 08:06 ?        00:00:00 /usr/sbin/named -u bind
  root        48     1  0 08:06 ?        00:00:00 /bin/login -f
  sysadmin    60    48  0 08:06 ?        00:00:00 -bash
  sysadmin   124    60  0 16:46 ?        00:00:00 ps -ef
  sysadmin   125    60  0 16:46 ?        00:00:00 head

  A common way to reduce the number of lines of output that the user might have to sort through is to use the grep command to filter the output display lines that match a keyword, such as a process name. For example, to only view information about the firefox process, execute a command like:

  KEGAVICIO@localhost:~$ ps -ef | grep firefox
  6090 pts/0    00:00:07 firefox

  An administrator may be more concerned about the processes of another user. There are several styles of options that the ps command supports, resulting in different ways to view an individual user's processes. To use the traditional UNIX option to view the processes of a specific user, use the -u option:

  KEGAVICIO@localhost:~$ ps -u root
  PID TTY          TIME CMD
    1 ?        00:00:00 init
   13 ?        00:00:00 cron
   15 ?        00:00:00 sshd
   43 ?        00:00:00 login

==========================================================================================================================================

4- Viewing Processes in Real Time

  Whereas the ps command provides a snapshot of the processes running at the instant the command is executed, the top command has a dynamic, screen-based interface that regularly updates the output of running processes. The top command is executed as follows:

  KEGAVICIO@localhost:~$ top

  top - 00:26:56 up 28 days, 20:53,  1 user,  load average: 0.11, 0.15, 0.17
  Tasks:   8 total,   1 running,   7 sleeping,   0 stopped,   0 zombie
  %Cpu(s):  0.2 us,  0.2 sy,  0.0 ni, 99.6 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
  KiB Mem : 13201464+total, 76979904 free, 47522152 used,  7512580 buff/cache
  KiB Swap: 13419622+total, 13415368+free,    42544 used. 83867456 avail Mem

    PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
      1 root      20   0   18376   3036   2764 S   0.0  0.0   0:00.12 init
      9 syslog    20   0  191328   5648   3100 S   0.0  0.0   0:00.04 rsyslogd
     13 root      20   0   28356   2552   2320 S   0.0  0.0   0:00.00 cron
     15 root      20   0   72296   3228   2484 S   0.0  0.0   0:00.00 sshd
     24 bind      20   0  878888  39324   7148 S   0.0  0.0   0:02.72 named
     43 root      20   0   78636   3612   3060 S   0.0  0.0   0:00.00 login
     56 sysadmin  20   0   18508   3440   3040 S   0.0  0.0   0:00.00 bash
     72 sysadmin  20   0   36600   3132   2696 R   0.0  0.0   0:00.03 top

  There is an extensive amount of interactive commands that can be executed from within the running top program. Use the H key to view a full list.

  Key	| Action
  K	  | Terminate the runaway process.
  R   | Adjust the priority of the process.

==========================================================================================================================================

5- Memory 

  Memory on a modern Linux system is governed and managed by the kernel. The hardware memory on the system is shared by all the processes on the system, through a method called virtual addressing. The physical memory can be referenced by a number of processes, any of which may think they are able to address more memory than they actually can.

  While a detailed review of Linux memory addressing is beyond the scope of this course, it’s important to note the difference between user space and kernel space. Kernel space is where code for the kernel is stored and executed. This is generally in a “protected” range of memory addresses and remains isolated from other processes with lower privileges.

  User space, on the other hand, is available to users and programs. They communicate with the Kernel through “system call” APIs that act as intermediaries between regular programs and the Kernel.

==========================================================================================================================================

6- Viewing Memory 

  Executing the free command without any options provides a snapshot of the memory being used at that moment.

  KEGAVICIO@localhost:~$ free                                                      
               total       used       free     shared    buffers     cached       
  Mem:      32953528   26171772    6781756          0       4136   22660364    
  -/+ buffers/cache:    3507272   29446256                                        
  Swap:            0          0          0 

  If you want to monitor memory usage over time with the free command, then you can execute it with the -s option (how often to update) and specify that number of seconds.

  KEGAVICIO@localhost:~$ free -s 10
                total        used        free      shared  buff/cache   available
  Mem:      132014640    47304084    77189512        3008     7521044    84085528
  Swap:     134196220       42544   134153676

                total        used        free      shared  buff/cache   available
  Mem:      132014640    47302928    77190668        3008     7521044    84086684
  Swap:     134196220       42544   134153676

  To make it easier to interpret what the free command is outputting, the -m or -g options can be useful by showing the output in either megabytes or gigabytes, respectively. Without these options, the output is displayed in bytes:

  An administrator that notices the system becoming low on free memory can use top or kill to terminate the processes of their own choice, rather than letting the system choose.

==========================================================================================================================================

7- Log Files 

  As the kernel and various processes run on the system, they produce output that describes how they are running. Some of this output is displayed as standard output and error in the terminal window where the process was executed, though some of this data is not sent to the screen. Instead, it is written to various files. This information is called log data or log messages.

  Log files are useful for many reasons; they help troubleshoot problems and determine whether or not unauthorized access has been attempted.

  Logging daemons differ in two main ways in recent distributions. The older method of doing system logging is two daemons (named syslogd and klogd) working together, but in more recent distributions, a single service named rsyslogd combines these two functions and more into a single daemon.

  File	      | Contents
  boot.log	  | Messages generated as services are started during the startup of the system.
  cron	      | Messages generated by the crond daemon for jobs to be executed on a recurring basis.
  dmesg	      | Messages generated by the kernel during system boot up.
  maillog	    | Messages produced by the mail daemon for e-mail messages sent or received.
  messages	  | Messages from the kernel and other processes that don't belong elsewhere. Sometimes named syslog instead of messages after the daemon that writes this file.
  secure	    | Messages from processes that required authorization or authentication (such as the login process).
  journal	    | Messages from the default configuration of the systemd-journald.service; can be configured in the /etc/journald.conf file amongst other places.
  Xorg.0.log  |	Messages from the X Windows (GUI) server.

  You can view the content  use the journalctl command on systemd-based systems, mainly because the /var/log/journal file now often contains binary information and using the cat or less commands may produce confusing screen behavior from control codes and binary items in the log files.

  Although most log files contain text as their contents, which can be viewed safely with many tools, other files such as the /var/log/btmp and /var/log/wtmp files contain binary. By using the file command, users can check the file content type before they view it to make sure that it is safe to view. The following file command classifies /var/log/wtmp as data, which usually means the file is binary:

  KEGAVICIO@localhost:~$ file /var/log/wtmp
  /var/log/wtmp: data
  For the files that contain binary data, there are commands available that will read the files, interpret their contents and then output text. For example, the lastb and last commands can be used to view the /var/log/btmp and /var/log/wtmp files respectively.


==========================================================================================================================================

8- Kernel Messages 

  Executing the dmesg command can produce up to 512 kilobytes of text, so filtering the command with a pipe to another command like less or grep is recommended. For example, if a user were troubleshooting problems with a USB device, then searching for the text USB with the grep command is helpful. The -i option is used to ignore case:

  KEGAVICIO@localhost:~$ dmesg | grep -i usb
  usbcore: registered new interface driver usbfs
  usbcore: registered new interface driver hub
  usbcore: registered new device driver usb
  ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
  ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
  ohci_hcd 0000:00:06.0: new USB bus registered, assigned bus number 1
  usb usb1: New USB device found, idVendor=1d6b, idProduct=0001
  usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1

==========================================================================================================================================

9- Filesystem Hierarchy Standard 
  
  Among the standards supported by the Linux Foundation is the Filesystem Hierarchy Standard (FHS), which is hosted at the URL http://www.pathname.com/fhs/.

  The FHS standard categorizes each system directory in a couple of ways:

  A directory can be categorized as either shareable or not, referring to whether the directory can be shared on a network and used by multiple machines.
The directory is put into a category of having either static files (file contents won't change) or variable files (file contents can change).
  To make these classifications, it is often necessary to refer to subdirectories below the top level of directories. 

          	Not Shareable	  Shareable
  Variable	/var/lock	      /var/mail
  Static	  /etc	          /opt

  The FHS standard defines four hierarchies of directories used in organizing the files of the filesystem. The top-level or root hierarchy follows:

  Directory	  | Contents
  /	            The base of the structure, or root of the filesystem, this directory unifies all directories regardless of whether they are local partitions, removable devices or network shares
  /bin	      | Essential binaries like the ls, cp, and rm commands, and be a part of the root filesystem
  /boot	      | Files necessary to boot the system, such as the Linux kernel and associated configuration files
  /dev	      | Files that represent hardware devices and other special files, such as the /dev/null and /dev/zero files
  /etc	      | Essential host configurations files such as the /etc/hosts or /etc/passwd files
  /home	      | User home directories
  /lib	      | Essential libraries to support the executable files in the /bin and /sbin directories
  /lib64	    | Essential libraries built for a specific architecture. For example, the /lib64 directory for 64-bit AMD/Intel x86 compatible processors
  /media	    | Mount point for removable media mounted automatically
  /mnt	      | Mount point for temporarily mounting filesystems manually
  /opt	      | Optional third-party software installation location
  /proc	      | Virtual filesystem for the kernel to report process information, as well as other information
  /root	      | Home directory of the root user
  /sbin	      | Essential system binaries primarily used by the root user
  /sys	      | Virtual filesystem for information about hardware devices connected to the system
  /srv	      | Location where site-specific services may be hosted
  /tmp	      | Directory where all users are allowed to create temporary files and that is supposed to be cleared at boot time (but often is not)
  /usr        | Second hierarchy
              | Non-essential files for multi-user use
  /usr/local	| Third hierarchy
              | Files for software not originating from distribution
  /var	      | Fourth hierarchy
              | Files that change over time
  /var/cache	| Files used for caching application data
  /var/log	  | Most log files
  /var/lock	  | Lock files for shared resources
  /var/spool	| Spool files for printing and mail
  /var/tmp	  | Temporary files to be preserved between reboots

  The second and third hierarchies, located under the /usr and /usr/local directories, repeat the pattern of many of the key directories found under the first hierarchy or root filesystem. The fourth hierarchy, the /var directory, also repeats some of the top-level directories such as lib, opt and tmp.

==========================================================================================================================================

10- Organization Within the Filesystem Hierarchy 

  User Home Directories
  
    The /home directory has a directory underneath it for each user account. For example, a user bob will have a home directory of /home/bob. Typically, only the user bob will have access to this directory. Without being assigned special permissions on other directories, a user can only create files in their home directory, the /tmp directory, and the /var/tmp directory.

  Binary directories

    Binary directories contain the programs that users and administrators execute to start processes or applications running on the system.

  User-Specific binaries
    The binary directories that are intended to be used by non-privileged users include:

    /bin
    /usr/bin
    /usr/local/bin
    Sometimes third-party software also store their executable files in directories such as:

    /usr/local/application/bin
    /opt/application/bin

  Root-Restricted Binaries 
    On the other hand, the sbin directories are primarily intended to be used by the system administrator (the root user). These usually include:

    /sbin
    /usr/sbin
    /usr/local/sbin

    Some third-party administrative applications could also use directories such as:
    /usr/local/application/sbin
    /opt/application/sbin

  Software Application Directories 
    For Debian-derived distributions, you can execute the dpkg -L packagename command to get the list of file locations. In Red Hat-derived distributions, you can run the rpm -ql packagename command for the list of the locations of the files that belong to that application.

    The executable program binary files may go in the /usr/bin directory if they are included with the operating system, or else they may go into the /usr/local/bin or /opt/application/bin directories if they came from a third party.

    The data for the application may be stored in one of the following subdirectories:
    /usr/share
    /usr/lib
    /opt/application
    /var/lib
    
    The file related to documentation may be stored in one of the following subdirectories:
    /usr/share/doc
    /usr/share/man
    /usr/share/info

  Library Directories 
    Libraries are files which contain code that is shared between multiple programs. Most library file names end in a file extension of .so, which means shared object.

    Multiple versions of a library may be present because the code may be different within each file even though it may perform similar functions as other versions of the library. One of the reasons that the code may be different, even though it may do the same thing as another library file, is that it is compiled to run on a different kind of processor.

  Variable Data Directories
    The /var directory and many of its subdirectories can contain data that changes frequently. If your system is used for email, then either /var/mail or /var/spool/mail is normally used to store users' email data. If you are printing from your system, then the /var/spool/cups directory is used to store the print jobs temporarily.


